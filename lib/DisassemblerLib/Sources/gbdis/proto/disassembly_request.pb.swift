// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/disassembly_request.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Disassembly_Datatype {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var kind: Disassembly_Datatype.Kind = .enumeration

  var representation: Disassembly_Datatype.Representation = .hexadecimal

  var valueNames: Dictionary<UInt64,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case enumeration // = 0
    case bitmask // = 1
    case any // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .enumeration
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .enumeration
      case 1: self = .bitmask
      case 2: self = .any
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .enumeration: return 0
      case .bitmask: return 1
      case .any: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  enum Representation: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case hexadecimal // = 0
    case binary // = 1
    case decimal // = 2
    case UNRECOGNIZED(Int)

    init() {
      self = .hexadecimal
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .hexadecimal
      case 1: self = .binary
      case 2: self = .decimal
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .hexadecimal: return 0
      case .binary: return 1
      case .decimal: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Disassembly_Datatype.Kind: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Disassembly_Datatype.Kind] = [
    .enumeration,
    .bitmask,
    .any,
  ]
}

extension Disassembly_Datatype.Representation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Disassembly_Datatype.Representation] = [
    .hexadecimal,
    .binary,
    .decimal,
  ]
}

#endif  // swift(>=4.2)

struct Disassembly_Global {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var address: UInt64 = 0

  var datatype: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Disassembly_Hints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var globals: [Disassembly_Global] = []

  var datatypes: [Disassembly_Datatype] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Disassembly_Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hints: Disassembly_Hints {
    get {return _storage._hints ?? Disassembly_Hints()}
    set {_uniqueStorage()._hints = newValue}
  }
  /// Returns true if `hints` has been explicitly set.
  var hasHints: Bool {return _storage._hints != nil}
  /// Clears the value of `hints`. Subsequent reads from it will return its default value.
  mutating func clearHints() {_uniqueStorage()._hints = nil}

  var binary: Data {
    get {return _storage._binary}
    set {_uniqueStorage()._binary = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "Disassembly"

extension Disassembly_Datatype: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Datatype"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "kind"),
    3: .same(proto: "representation"),
    4: .standard(proto: "value_names"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularEnumField(value: &self.kind)
      case 3: try decoder.decodeSingularEnumField(value: &self.representation)
      case 4: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufString>.self, value: &self.valueNames)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.kind != .enumeration {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 2)
    }
    if self.representation != .hexadecimal {
      try visitor.visitSingularEnumField(value: self.representation, fieldNumber: 3)
    }
    if !self.valueNames.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufUInt64,SwiftProtobuf.ProtobufString>.self, value: self.valueNames, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Disassembly_Datatype, rhs: Disassembly_Datatype) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.kind != rhs.kind {return false}
    if lhs.representation != rhs.representation {return false}
    if lhs.valueNames != rhs.valueNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Disassembly_Datatype.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENUMERATION"),
    1: .same(proto: "BITMASK"),
    2: .same(proto: "ANY"),
  ]
}

extension Disassembly_Datatype.Representation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEXADECIMAL"),
    1: .same(proto: "BINARY"),
    2: .same(proto: "DECIMAL"),
  ]
}

extension Disassembly_Global: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Global"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "address"),
    3: .same(proto: "datatype"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.address)
      case 3: try decoder.decodeSingularStringField(value: &self.datatype)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.address != 0 {
      try visitor.visitSingularUInt64Field(value: self.address, fieldNumber: 2)
    }
    if !self.datatype.isEmpty {
      try visitor.visitSingularStringField(value: self.datatype, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Disassembly_Global, rhs: Disassembly_Global) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.address != rhs.address {return false}
    if lhs.datatype != rhs.datatype {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Disassembly_Hints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Hints"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "globals"),
    2: .same(proto: "datatypes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.globals)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.datatypes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.globals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.globals, fieldNumber: 1)
    }
    if !self.datatypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.datatypes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Disassembly_Hints, rhs: Disassembly_Hints) -> Bool {
    if lhs.globals != rhs.globals {return false}
    if lhs.datatypes != rhs.datatypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Disassembly_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hints"),
    2: .same(proto: "binary"),
  ]

  fileprivate class _StorageClass {
    var _hints: Disassembly_Hints? = nil
    var _binary: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hints = source._hints
      _binary = source._binary
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._hints)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._binary)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._hints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._binary.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._binary, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Disassembly_Request, rhs: Disassembly_Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hints != rhs_storage._hints {return false}
        if _storage._binary != rhs_storage._binary {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
